# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cleaner.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import ArchivosExp
import AG
import DO
import PSO

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(441, 306)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 191, 251))
        self.groupBox.setObjectName("groupBox")
        
        self.btnRun = QtWidgets.QPushButton(self.groupBox)
        self.btnRun.setGeometry(QtCore.QRect(10, 210, 171, 31))
        self.btnRun.setObjectName("btnRun")
        self.btnRun.clicked.connect(self.run)
        
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(10, 50, 171, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems({'Genetico','Enjambre','Diferencial'})
        
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 30, 171, 16))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(10, 100, 171, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 80, 171, 16))
        self.label_2.setObjectName("label_2")
        self.spinBox = QtWidgets.QSpinBox(self.groupBox)
        self.spinBox.setGeometry(QtCore.QRect(10, 150, 42, 22))
        self.spinBox.setObjectName("spinBox")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(10, 130, 171, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(60, 150, 101, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(10, 180, 81, 16))
        self.label_5.setObjectName("label_5")
        self.LblTotal = QtWidgets.QLabel(self.groupBox)
        self.LblTotal.setGeometry(QtCore.QRect(90, 180, 91, 16))
        self.LblTotal.setObjectName("LblTotal")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(210, 30, 221, 231))
        self.listWidget.setObjectName("listWidget")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(210, 10, 121, 16))
        self.label_6.setObjectName("label_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 441, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Limpiador Optimizado"))
        self.btnRun.setText(_translate("MainWindow", "Ejecutar"))
        self.label.setText(_translate("MainWindow", "Algoritmo a utilizar:"))
        self.label_2.setText(_translate("MainWindow", "Directorio a analizar:"))
        self.label_3.setText(_translate("MainWindow", "Tamaño a liberar:"))
        self.label_4.setText(_translate("MainWindow", "MB"))
        self.label_5.setText(_translate("MainWindow", "Total alcanzado:"))
        self.LblTotal.setText(_translate("MainWindow", "0 MB"))
        self.label_6.setText(_translate("MainWindow", "Archivos Seleccionados:"))
        
    def run(self):
        metodo = ''
        ruta = ""
        archivos = []
        pesos = []
        tamanioDeseado = 0
        
        #Obtenemos los parametros del problema
        print(":::::::: Optimizador de Limpiador de Archivos ::::::::")
        print('')
        ruta = self.lineEdit.text()
        if os.path.exists(ruta)==False:
            print("El directorio especificado no existe")
        else:
            print("Obteniendo información del directorio ",ruta," ...")
            #Obtenemos los archivos y los asignamos al problema
            tamanioActual = 0
            carpeta = os.listdir(ruta)
            for archivo in carpeta:
                rutaArchivo = ruta+'\\'+archivo
                t = int(os.path.getsize(rutaArchivo))
                archivos.append(archivo)
                pesos.append(t)
                tamanioActual += t
            print('')
            print("El directorio contiene ",len(archivos)," archivos")
            print("El directorio actual tiene archivos equivalentes a ",tamanioActual/1024/1024,"(MB)")
            
            print('')
            tamanioDeseado = self.spinBox.value()
            tamanioDeseado=tamanioDeseado*1024*1024
            
            #Clase problema, archivos tiene los nombres de la ruta y pesos su tamaño
            directorio = ArchivosExp.archivosExp(archivos, pesos, tamanioDeseado)
            print('')
            print("Seleccione el metodo de resolución:")
            print("-Genetico")
            print("-Enjambre")
            print("-Diferencial")
            metodo=self.comboBox.currentText()
            
            #Ejecuta Algoritmo Evolutivo
            solucion = []
            if(metodo=='Genetico'):
                solucion = self.genetico(len(archivos),directorio)
            elif(metodo =='Diferencial'):
                solucion = self.diferencial(len(archivos),directorio)
            elif(metodo=='Enjambre'):
                solucion = self.enjambreParticulas(len(archivos),directorio)
            else:
                print('Metodo no soportado')
                
            #Mostramos el peso final alcanzado y que archivos eliminar
            tamanioAlcanzado = 0
            numSeleccionados = 0
            print('')
            print('::::::::::: Resultados :::::::::::')
            print("Debera eliminar los siguientes archivos:")
            print('')
            for idx in range(len(solucion)):
                if solucion[idx]:
                    self.listWidget.addItem(archivos[idx])
                    tamanioAlcanzado += pesos[idx]
                    numSeleccionados += 1
                    print(archivos[idx])
            print('')
            print("Total de archivos necesarios a eliminar: ", numSeleccionados)
            print("El tamaño actual es: ",round(tamanioActual/1024/1024,2))
            print("El tamaño total de los archivos seleccionados es: ", round(tamanioAlcanzado / 1024 / 1024, 2))
            print("Posible peso final: ",round((tamanioActual - tamanioAlcanzado)/1024/1024,2),'MB')
            self.LblTotal.setText(str(round((tamanioActual - tamanioAlcanzado)/1024/1024,2))+'MB')
            
        
    def genetico(self,numAlelos, directorio):
        # :::::::::::::::::::::: Algoritmo Genetico ::::::::::::::::::::::::::
        alelos = numAlelos
        individuos = 50
        tamano_gen = 1 #cada bit representa s
        generaciones = 2000
        factor_mutacion = 0.01
        ag = AG.AG(individuos, alelos, tamano_gen, generaciones, factor_mutacion, directorio)
        return ag.run()

    def enjambreParticulas(self,numDimensiones, directorio):
        cantidad_individuos = numDimensiones
        dimensiones = numDimensiones
        ro = numDimensiones
        phi1_max=1.7
        phi2_max=2.0
        v_max=0.05
        generaciones=2000
        pso = PSO.PSO(cantidad_individuos, dimensiones, ro, phi1_max, phi2_max, v_max, directorio, generaciones)
        return pso.run()
        
    def diferencial(self,numDimensiones, directorio):
        # :::::::::::::::::::::: Algoritmo Diferencial ::::::::::::::::::::::::::
        individuos = 50
        dimensiones = numDimensiones
        F = 0.5 #E[0.4,0.9]
        c = 0.85#E[0.1,1]
        generaciones = 2000
        ad = DO.DO(individuos, dimensiones, F, c, directorio,generaciones)
        return ad.run()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
